# # name: CI/CD Pipeline

# # on:
# #   push:
# #     branches:
# #       - main

# # jobs:
# #   build:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Set up Python
# #         uses: actions/setup-python@v2
# #         with:
# #           python-version: '3.9'

# #       - name: Install dependencies
# #         run: |
# #           python -m pip install --upgrade pip
# #           pip install -r app/requirements.txt

# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v1

# #       - name: Install Docker Compose
# #         run: |
# #           sudo apt-get update
# #           sudo apt-get install -y docker-compose



# #       - name: Build Docker image
# #         run: docker-compose up --build -d
# #         env:
# #           DB_USER: ${{ secrets.DB_USER }}
# #           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
# #           SECRET_KEY: ${{ secrets.SECRET_KEY }}
# #           DATABASE_URL: ${{ secrets.DATABASE_URL }}

# #       - name: Run tests
# #         run: docker exec flask-app pytest


# name: CI

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Create .env file
#       run: |
#         echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> .env
#         echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
#         echo "POSTGRES_DB=wog-db" >> .env
#         echo "DATABASE_URL=${{secrets.DATABASE_URL}}" >> .env

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: Cache Docker layers
#       uses: actions/cache@v3
#       with:
#         path: /tmp/.buildx-cache
#         key: ${{ runner.os }}-buildx-${{ github.sha }}
#         restore-keys: |
#           ${{ runner.os }}-buildx-

#     - name: Install Docker Compose
#       run: |
#         sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#         sudo chmod +x /usr/local/bin/docker-compose

#     - name: Build and push Docker images
#       run: |
#         docker-compose -f docker-compose.yml build
#       env:
#         POSTGRES_DB: wog-db
#         POSTGRES_USER: ${{ secrets.DB_USER }}
#         POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
#         DATABASE_URL : ${{secrets.DATABASE_URL}}


#     - name: Run Docker Compose
#       run: |
#         docker-compose -f docker-compose.yml up -d
#         docker-compose logs postgres
#       env:
#         POSTGRES_DB: wog-db
#         POSTGRES_USER: ${{ secrets.DB_USER }}
#         POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
#         DATABASE_URL : ${{secrets.DATABASE_URL}}

#     - name: Run tests
#       run: |
#         docker-compose exec web pytest
#       env:
#         POSTGRES_DB: wog-db
#         POSTGRES_USER: ${{ secrets.DB_USER }}
#         POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
#         DATABASE_URL : ${{secrets.DATABASE_URL}}

name: CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "POSTGRES_DB=wog-db" >> .env
        echo "DATABASE_URL=${{secrets.DATABASE_URL}}" >> .env

    - name: Install Docker and Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker --version
        docker-compose --version

    - name: Build Docker images
      run: docker-compose -f docker-compose.yml build

    - name: Start services
      run: docker-compose -f docker-compose.yml up -d

    - name: Wait for PostgreSQL to be healthy
      run: |
        for i in {1..10}; do
          if docker-compose exec postgres pg_isready -U ${{ secrets.DB_USER }} -d wog-db; then
            echo "PostgreSQL is ready!"
            break
          else
            echo "Waiting for PostgreSQL to be ready..."
            sleep 10
          fi
        done

    - name: Run tests
      run: docker-compose exec web pytest

    - name: Tear down services
      run: docker-compose down
