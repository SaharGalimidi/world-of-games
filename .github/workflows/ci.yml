name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Flask App Docker Image
        run: docker build -t flask-app -f app/Dockerfile .

      - name: Build Postgres Docker Image
        run: docker build -t postgres-db -f libs/postgres/Dockerfile .

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..30}; do
            if docker-compose exec postgres pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; then
              break
            fi
            echo "Waiting for Postgres to be ready..."
            sleep 2
          done

      - name: Initialize the database
        run: docker-compose exec web python main.py

      - name: Run tests
        run: docker-compose exec web pytest

      - name: Shut down Docker Compose
        run: docker-compose down
